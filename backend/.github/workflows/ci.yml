name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  GO_VERSION: "1.25"
  SQLC_VERSION: "1.30.0"

jobs:
  # Format and lint checks
  format-lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run golangci-lint
        run: golangci-lint run ./...
        continue-on-error: true # Allow workflow to continue even if linting fails

  # SQLC validation
  sqlc:
    name: SQLC Validation
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up SQLC
        uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: ${{ env.SQLC_VERSION }}

      - name: SQLC Diff Check
        run: sqlc diff

      - name: SQLC Vet
        run: sqlc vet
        env:
          POSTGRESQL_SERVER_URI: postgres://postgres:postgres@localhost:5432/test?sslmode=disable

  # Test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: make test-unit
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test?sslmode=disable

      - name: Run all tests
        run: make test
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test?sslmode=disable

      - name: Generate coverage report
        run: make test-coverage
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test?sslmode=disable

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [format-lint, sqlc, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build server
        run: go build -v ./cmd/server

      - name: Build all packages
        run: go build -v ./...

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "-no-fail -fmt sarif -out results.sarif ./..."
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        continue-on-error: true

  # Integration test (if you have them)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run integration tests
        run: |
          # Run any integration tests you might have
          go test ./... -tags=integration -v || true
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test?sslmode=disable
        continue-on-error: true
