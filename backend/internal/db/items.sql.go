// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: items.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (user_id, url, text_content, summary, type, tags, platform, authors) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, user_id, url, is_read, text_content, summary, type, tags, platform, authors, created_at, modified_at
`

type CreateItemParams struct {
	UserID      *int32   `json:"user_id"`
	Url         *string  `json:"url"`
	TextContent *string  `json:"text_content"`
	Summary     *string  `json:"summary"`
	Type        *string  `json:"type"`
	Tags        []string `json:"tags"`
	Platform    *string  `json:"platform"`
	Authors     []string `json:"authors"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.UserID,
		arg.Url,
		arg.TextContent,
		arg.Summary,
		arg.Type,
		arg.Tags,
		arg.Platform,
		arg.Authors,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.IsRead,
		&i.TextContent,
		&i.Summary,
		&i.Type,
		&i.Tags,
		&i.Platform,
		&i.Authors,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, user_id, url, is_read, text_content, summary, type, tags, platform, authors, created_at, modified_at FROM items WHERE id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.IsRead,
		&i.TextContent,
		&i.Summary,
		&i.Type,
		&i.Tags,
		&i.Platform,
		&i.Authors,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getItemsByUser = `-- name: GetItemsByUser :many
SELECT id, user_id, url, is_read, text_content, summary, type, tags, platform, authors, created_at, modified_at FROM items WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetItemsByUser(ctx context.Context, userID *int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.IsRead,
			&i.TextContent,
			&i.Summary,
			&i.Type,
			&i.Tags,
			&i.Platform,
			&i.Authors,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadItemsByUser = `-- name: GetUnreadItemsByUser :many
SELECT id, user_id, url, is_read, text_content, summary, type, tags, platform, authors, created_at, modified_at FROM items WHERE user_id = $1 AND is_read = FALSE ORDER BY created_at DESC
`

func (q *Queries) GetUnreadItemsByUser(ctx context.Context, userID *int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, getUnreadItemsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.IsRead,
			&i.TextContent,
			&i.Summary,
			&i.Type,
			&i.Tags,
			&i.Platform,
			&i.Authors,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markItemAsRead = `-- name: MarkItemAsRead :exec
UPDATE items SET is_read = TRUE, modified_at = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) MarkItemAsRead(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markItemAsRead, id)
	return err
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items SET url = $2, is_read = $3, text_content = $4, summary = $5, type = $6, tags = $7, platform = $8, authors = $9, modified_at = CURRENT_TIMESTAMP WHERE id = $1
`

type UpdateItemParams struct {
	ID          int32    `json:"id"`
	Url         *string  `json:"url"`
	IsRead      *bool    `json:"is_read"`
	TextContent *string  `json:"text_content"`
	Summary     *string  `json:"summary"`
	Type        *string  `json:"type"`
	Tags        []string `json:"tags"`
	Platform    *string  `json:"platform"`
	Authors     []string `json:"authors"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.Exec(ctx, updateItem,
		arg.ID,
		arg.Url,
		arg.IsRead,
		arg.TextContent,
		arg.Summary,
		arg.Type,
		arg.Tags,
		arg.Platform,
		arg.Authors,
	)
	return err
}
