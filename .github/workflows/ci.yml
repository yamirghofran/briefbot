name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  GO_VERSION: "1.25"
  SQLC_VERSION: "1.30.0"

jobs:
  # Format and lint checks
  format-lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run golangci-lint
        run: golangci-lint run ./...
        continue-on-error: true # Allow workflow to continue even if linting fails

  # SQLC validation
  sqlc:
    name: SQLC Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up SQLC
        uses: sqlc-dev/setup-sqlc@v4
        with:
          sqlc-version: ${{ env.SQLC_VERSION }}

      - name: SQLC Diff Check
        run: sqlc diff

  # SQLC generate - ensures code generation works
  generate:
     name: SQLC Generate
     runs-on: ubuntu-latest
     defaults:
       run:
         working-directory: backend
     steps:
       - uses: actions/checkout@v4

       - name: Set up SQLC
         uses: sqlc-dev/setup-sqlc@v4
         with:
           sqlc-version: ${{ env.SQLC_VERSION }}

       - name: Generate SQLC code
         run: sqlc generate

       - name: Check for uncommitted changes
         run: |
           if [ -n "$(git status --porcelain)" ]; then
             echo "SQLC generated code that is not committed. Please run 'sqlc generate' and commit the changes."
             git status
             exit 1
            fi

  # Unit test suite
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: make test-unit

      - name: Run all unit tests
        run: make test

      - name: Generate coverage report
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    needs: [format-lint, sqlc, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build server
        run: go build -v ./cmd/server

      - name: Build all packages
        run: go build -v ./...

  # Static analysis
  staticcheck:
    name: Static Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...
        continue-on-error: true

  # Integration tests (R2 and Speech services)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    needs: [build]
    # Only run on main branch or when explicitly triggered
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Verify FFmpeg installation
        run: ffmpeg -version

      - name: Run integration tests
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_PUBLIC_HOST: ${{ secrets.R2_PUBLIC_HOST }}
        run: make test-integration
        continue-on-error: true

      - name: Generate integration coverage report
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_PUBLIC_HOST: ${{ secrets.R2_PUBLIC_HOST }}
        run: make test-coverage-integration
        continue-on-error: true

      - name: Upload integration coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage-integration.out
          flags: integration
          name: codecov-integration
        continue-on-error: true
